{
  "pensamentos": [
    {
      "id": 3,
      "conteudo": "Tenho que terminar este curso hoje 08/02",
      "autoria": "isa",
      "modelo": "modelo3"
    },
    {
      "id": 4,
      "conteudo": "Quero ser fullstack",
      "autoria": "Isa",
      "modelo": "modelo1"
    },
    {
      "id": 5,
      "conteudo": "O decorador @Injectable informa ao Angular que essa classe é injetável e com o metadado providedIn como root torna esse serviço visível em toda aplicação.",
      "autoria": "Alura",
      "modelo": "modelo2"
    },
    {
      "id": 6,
      "conteudo": "O Objetivo de um serviço é organizar e compartilhar regras de negócios, dados e métodos para diferentes componentes de uma aplicação por meio da injeção de dependência.",
      "autoria": "Alura",
      "modelo": "modelo3"
    },
    {
      "id": 7,
      "conteudo": "Testando edicao de pensamento na api",
      "autoria": "Isinha Dev",
      "modelo": "modelo1"
    },
    {
      "id": 8,
      "conteudo": "Um Observable pode ser acessado em várias partes da aplicação, basta se inscrever.",
      "autoria": "Alura",
      "modelo": "modelo2"
    },
    {
      "id": 9,
      "conteudo": "Ao fazer requisições o HttpClient retorna observable da chamada desses métodos. O Observable é utilizado internamente pelo framework e já é instalado quando você cria uma nova aplicação Angular e é uma funcionalidade da biblioteca RXJS.",
      "autoria": "alura",
      "modelo": "modelo3"
    },
    {
      "id": 10,
      "conteudo": "O Observable atua como observador de um item e sempre que houver mudança ele emite uma notificação, com isso executamos alguma ação. Ou seja ele atua de forma assincrona",
      "autoria": "Dev Alura",
      "modelo": "modelo1"
    },
    {
      "id": 11,
      "conteudo": "O método GET deve receber como parâmetro a URL da API.",
      "autoria": "Alura",
      "modelo": "modelo2"
    },
    {
      "id": 12,
      "conteudo": "O HttpClient retorna Observable das chamadas de métodos HTTP, o que facilita na implementação de regras em caso de sucesso, erro e conclusão da requisição. HttpClient é uma classe que possui envia requisições HTTP e permite interagir com os suas diferentes possibilidades de resultados.",
      "autoria": "Alura Dev",
      "modelo": "modelo3"
    },
    {
      "id": 13,
      "conteudo": "O importante é o que importa",
      "autoria": "Autor Desconhecido",
      "modelo": "modelo1"
    },
    {
      "id": 14,
      "conteudo": "Criacao de formularios reativos - forma 1: ngOnInit(): void {     this.formulario = new FormGroup({       conteudo: new FormControl(''),       autoria: new FormControl(''),       modelo: new FormControl('')     })   }",
      "autoria": "Alura",
      "modelo": "modelo2"
    },
    {
      "id": 15,
      "conteudo": "segunda forma criacao forms reativos: ngOnInit(): void {     this.formulario = this.formBuilder.group({       conteudo: [''],       autoria: [''],       modelo: ['']     })   }",
      "autoria": "Alura",
      "modelo": "modelo3"
    },
    {
      "conteudo": "Na tag <form> do html, é necessário fazer um property binding por meio da diretiva formGroup e atribuir a ela o valor da propriedade formulario, criada na classe typescript. Além disso, é necessário incluir em cada input a propriedade formControlName, com o nome declarado na classe.  <form [formGroup]=\"formulario\">  formControlName=\"conteudo\"  formControlName=\"autoria\"  formControlName=\"modelo\"",
      "autoria": "Alura",
      "modelo": "modelo1",
      "id": 17
    },
    {
      "conteudo": "https://angular.io/api/forms/Validators#description",
      "autoria": "Form Validation angular",
      "modelo": "modelo2",
      "id": 18
    },
    {
      "id": 19,
      "conteudo": "Que a força esteja com você",
      "autoria": "Mestre Yoda!",
      "modelo": "modelo3"
    },
    {
      "conteudo": "https://angular.io/api/common/http/HttpParams",
      "autoria": "angular doc",
      "modelo": "modelo1",
      "id": 20
    }
  ]
}